interface DownloadOptions {
  title?: string;
  author?: string;
  filename?: string;
  includeTimestamp?: boolean;
}

// Convert markdown to HTML using the same approach as the chat interface
const markdownToHTML = (content: string): string => {
  // This function simulates the same markdown rendering as react-markdown
  return content
    // Headers
    .replace(/^#{1,6}\s+(.+)$/gm, (match, text) => {
      const level = match.match(/^#{1,6}/)[0].length;
      return `<h${level} class="text-${level === 1 ? '2xl' : level === 2 ? 'xl' : level === 3 ? 'lg' : 'base'} font-bold mb-4 mt-6">${text}</h${level}>`;
    })
    // Bold
    .replace(/\*\*([^*]+)\*\*/g, '<strong class="font-bold">$1</strong>')
    // Italic
    .replace(/\*([^*]+)\*/g, '<em class="italic">$1</em>')
    // Code blocks with syntax highlighting
    .replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
      const language = lang || 'text';
      return `
        <div class="code-block mb-4">
          <div class="code-header flex justify-between items-center px-3 py-2 bg-gray-800 text-gray-200 text-sm rounded-t">
            <span class="language-label">${language}</span>
            <span class="copy-text">copy</span>
          </div>
          <pre class="bg-gray-900 text-gray-100 p-4 rounded-b overflow-x-auto"><code class="language-${language}">${code}</code></pre>
        </div>
      `;
    })
    // Inline code
    .replace(/`([^`]+)`/g, '<code class="px-1 py-0.5 rounded bg-gray-200 text-gray-800 text-sm font-mono">$1</code>')
    // Links
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, url) => {
      // Check if it's a numeric reference
      if (/^\d+$/.test(text)) {
        return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center w-4 h-4 text-xs bg-gray-600 text-white rounded-full mr-1 mb-1 font-medium">${text}</a>`;
      }
      return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="text-blue-600 underline">${text}</a>`;
    })
    // Unordered lists
    .replace(/^[\s]*[-*+]\s+(.+)$/gm, '<li class="mb-2">$1</li>')
    .replace(/(<li.*<\/li>)/g, '<ul class="list-disc list-inside mb-4 space-y-2">$1</ul>')
    // Ordered lists
    .replace(/^[\s]*\d+\.\s+(.+)$/gm, '<li class="mb-2">$1</li>')
    .replace(/(<li.*<\/li>)/g, '<ol class="list-decimal list-inside mb-4 space-y-2">$1</ol>')
    // Paragraphs
    .replace(/\n\s*\n/g, '</p><p class="mb-4 leading-relaxed">')
    .replace(/^(.*)$/gm, '<p class="mb-4 leading-relaxed">$1</p>')
    // Clean up
    .replace(/<p><\/p>/g, '')
    .replace(/<p><p>/g, '<p>')
    .replace(/<\/p><\/p>/g, '</p>')
    // Remove empty paragraphs
    .replace(/<p class="mb-4 leading-relaxed"><\/p>/g, '');
};

// Process markdown content to preserve formatting for TXT
const processContentForFormattedText = (content: string): string => {
  return content
    // Keep code blocks but format them properly
    .replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
      return `\n[CODE BLOCK${lang ? ` (${lang})` : ''}]\n${code}\n[/CODE BLOCK]\n`;
    })
    // Keep inline code formatting
    .replace(/`([^`]+)`/g, '[CODE]$1[/CODE]')
    // Keep bold formatting
    .replace(/\*\*([^*]+)\*\*/g, '[BOLD]$1[/BOLD]')
    // Keep italic formatting
    .replace(/\*([^*]+)\*/g, '[ITALIC]$1[/ITALIC]')
    // Keep links but format them
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '[LINK]$1[/LINK] ($2)')
    // Keep headers but format them
    .replace(/^#{1,6}\s+(.+)$/gm, (match, text) => {
      const level = match.match(/^#{1,6}/)[0].length;
      const prefix = '='.repeat(level);
      return `\n${prefix} ${text} ${prefix}\n`;
    })
    // Keep list items but format them
    .replace(/^[\s]*[-*+]\s+(.+)$/gm, 'â€¢ $1')
    // Keep numbered list items
    .replace(/^[\s]*\d+\.\s+(.+)$/gm, (match, text) => {
      const number = match.match(/^\s*(\d+)\./)[1];
      return `${number}. ${text}`;
    })
    // Keep paragraphs (double line breaks)
    .replace(/\n\s*\n/g, '\n\n')
    .trim();
};

// Download as TXT (plain text) - Native browser support
export const downloadResponseAsTXT = (
  content: string,
  options: DownloadOptions = {}
) => {
  const {
    title = 'AI Response',
    filename = 'ai-response',
    includeTimestamp = true
  } = options;

  // Process content to preserve formatting
  const processedContent = processContentForFormattedText(content);
  
  // Create text content with header
  let textContent = `${title}\n`;
  textContent += '='.repeat(title.length) + '\n\n';
  
  if (includeTimestamp) {
    textContent += `Generated on: ${new Date().toLocaleString()}\n\n`;
  }
  
  textContent += processedContent;
  textContent += '\n\n---\nGenerated by Weam AI';

  // Create blob and download
  const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const finalFilename = includeTimestamp 
    ? `${filename}-${timestamp}.txt`
    : `${filename}.txt`;

  const link = document.createElement('a');
  link.href = url;
  link.download = finalFilename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

// Download as HTML (can be opened in Word)
export const downloadResponseAsHTML = (
  content: string,
  options: DownloadOptions = {}
) => {
  const {
    title = 'AI Response',
    filename = 'ai-response',
    includeTimestamp = true
  } = options;

  // Convert markdown to HTML using the same approach as chat
  const htmlContent = markdownToHTML(content);

  // Create HTML content with Tailwind-like styling
  const fullHtmlContent = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <title>${title}</title>
        <style>
          body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0;
            padding: 40px;
            line-height: 1.6;
            color: #333;
            background: #fff;
            max-width: 800px;
            margin: 0 auto;
          }
          .markdown {
            width: 100%;
            max-width: 100%;
          }
          .prose {
            color: #374151;
            max-width: none;
          }
          h1, h2, h3, h4, h5, h6 { 
            color: #111827; 
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
          }
          h1 { 
            font-size: 2rem;
            border-bottom: 2px solid #e5e7eb; 
            padding-bottom: 8px; 
            margin-bottom: 16px;
          }
          h2 { 
            font-size: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 4px;
          }
          h3 { font-size: 1.25rem; }
          h4 { font-size: 1.125rem; }
          h5 { font-size: 1rem; }
          h6 { font-size: 0.875rem; }
          .timestamp { 
            color: #6b7280; 
            font-size: 0.875rem; 
            margin-bottom: 24px; 
            font-style: italic;
          }
          .content { 
            line-height: 1.6; 
            margin-top: 24px;
          }
          .code-block {
            margin: 16px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
          }
          .code-header {
            background: #1f2937;
            color: #f9fafb;
            font-size: 0.875rem;
            font-weight: 500;
            padding: 8px 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          .language-label {
            text-transform: uppercase;
            font-size: 0.75rem;
            opacity: 0.8;
          }
          .copy-text {
            opacity: 0.7;
            cursor: pointer;
          }
          pre {
            background: #111827;
            color: #f9fafb;
            padding: 16px;
            margin: 0;
            overflow-x: auto;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            font-size: 0.875rem;
            line-height: 1.5;
          }
          code {
            background: #f3f4f6;
            color: #1f2937;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            font-size: 0.875rem;
            font-weight: 500;
          }
          pre code {
            background: transparent;
            color: inherit;
            padding: 0;
            border-radius: 0;
          }
          ul, ol {
            margin: 16px 0;
            padding-left: 24px;
          }
          li {
            margin: 8px 0;
            line-height: 1.6;
          }
          ul li {
            list-style-type: disc;
          }
          ol li {
            list-style-type: decimal;
          }
          p {
            margin: 16px 0;
            line-height: 1.7;
          }
          a {
            color: #2563eb;
            text-decoration: underline;
            text-decoration-thickness: 1px;
            text-underline-offset: 2px;
          }
          a:hover {
            color: #1d4ed8;
          }
          .footer {
            margin-top: 48px;
            padding-top: 24px;
            border-top: 1px solid #e5e7eb;
            color: #6b7280;
            font-size: 0.875rem;
            text-align: center;
          }
          @media print {
            body { margin: 0; padding: 20px; }
            .code-block { break-inside: avoid; }
            pre { white-space: pre-wrap; }
          }
        </style>
      </head>
      <body>
        <h1>${title}</h1>
        ${includeTimestamp ? `<div class="timestamp">Generated on: ${new Date().toLocaleString()}</div>` : ''}
        <div class="markdown prose">
          ${htmlContent}
        </div>
        <div class="footer">
          Generated by Weam AI
        </div>
      </body>
    </html>
  `;

  // Create blob and download
  const blob = new Blob([fullHtmlContent], { type: 'text/html;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
  const finalFilename = includeTimestamp 
    ? `${filename}-${timestamp}.html`
    : `${filename}.html`;

  const link = document.createElement('a');
  link.href = url;
  link.download = finalFilename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  URL.revokeObjectURL(url);
};

// Download as PDF using browser print functionality
export const downloadResponseAsPDF = async (
  content: string,
  options: DownloadOptions = {}
) => {
  const {
    title = 'AI Response',
    filename = 'ai-response',
    includeTimestamp = true
  } = options;

  // Convert markdown to HTML using the same approach as chat
  const htmlContent = markdownToHTML(content);

  // Create a temporary window for printing
  const printWindow = window.open('', '_blank');
  if (!printWindow) {
    // Fallback to HTML download if popup is blocked
    downloadResponseAsHTML(content, options);
    return;
  }

  const fullHtmlContent = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="UTF-8">
        <title>${title}</title>
        <style>
          @media print {
            body { margin: 0; padding: 20px; }
            .code-block { break-inside: avoid; }
            pre { white-space: pre-wrap; }
            .no-print { display: none; }
          }
          body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
            margin: 0;
            padding: 40px;
            line-height: 1.6;
            color: #333;
            background: #fff;
            max-width: 800px;
            margin: 0 auto;
          }
          .markdown {
            width: 100%;
            max-width: 100%;
          }
          .prose {
            color: #374151;
            max-width: none;
          }
          h1, h2, h3, h4, h5, h6 { 
            color: #111827; 
            margin-top: 24px;
            margin-bottom: 16px;
            font-weight: 600;
            line-height: 1.25;
          }
          h1 { 
            font-size: 2rem;
            border-bottom: 2px solid #e5e7eb; 
            padding-bottom: 8px; 
            margin-bottom: 16px;
          }
          h2 { 
            font-size: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            padding-bottom: 4px;
          }
          h3 { font-size: 1.25rem; }
          h4 { font-size: 1.125rem; }
          h5 { font-size: 1rem; }
          h6 { font-size: 0.875rem; }
          .timestamp { 
            color: #6b7280; 
            font-size: 0.875rem; 
            margin-bottom: 24px; 
            font-style: italic;
          }
          .content { 
            line-height: 1.6; 
            margin-top: 24px;
          }
          .code-block {
            margin: 16px 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
          }
          .code-header {
            background: #1f2937;
            color: #f9fafb;
            font-size: 0.875rem;
            font-weight: 500;
            padding: 8px 12px;
            display: flex;
            justify-content: space-between;
            align-items: center;
          }
          .language-label {
            text-transform: uppercase;
            font-size: 0.75rem;
            opacity: 0.8;
          }
          .copy-text {
            opacity: 0.7;
            cursor: pointer;
          }
          pre {
            background: #111827;
            color: #f9fafb;
            padding: 16px;
            margin: 0;
            overflow-x: auto;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            font-size: 0.875rem;
            line-height: 1.5;
          }
          code {
            background: #f3f4f6;
            color: #1f2937;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
            font-size: 0.875rem;
            font-weight: 500;
          }
          pre code {
            background: transparent;
            color: inherit;
            padding: 0;
            border-radius: 0;
          }
          ul, ol {
            margin: 16px 0;
            padding-left: 24px;
          }
          li {
            margin: 8px 0;
            line-height: 1.6;
          }
          ul li {
            list-style-type: disc;
          }
          ol li {
            list-style-type: decimal;
          }
          p {
            margin: 16px 0;
            line-height: 1.7;
          }
          a {
            color: #2563eb;
            text-decoration: underline;
            text-decoration-thickness: 1px;
            text-underline-offset: 2px;
          }
          a:hover {
            color: #1d4ed8;
          }
          .footer {
            margin-top: 48px;
            padding-top: 24px;
            border-top: 1px solid #e5e7eb;
            color: #6b7280;
            font-size: 0.875rem;
            text-align: center;
          }
          .print-button {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 24px;
            background: #2563eb;
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
          }
          .print-button:hover {
            background: #1d4ed8;
          }
        </style>
      </head>
      <body>
        <button class="print-button no-print" onclick="window.print()">Save as PDF</button>
        <h1>${title}</h1>
        ${includeTimestamp ? `<div class="timestamp">Generated on: ${new Date().toLocaleString()}</div>` : ''}
        <div class="markdown prose">
          ${htmlContent}
        </div>
        <div class="footer">
          Generated by Weam AI
        </div>
      </body>
    </html>
  `;

  printWindow.document.write(fullHtmlContent);
  printWindow.document.close();
  
  // Wait for content to load
  printWindow.onload = () => {
    // Auto-print after a short delay
    setTimeout(() => {
      printWindow.print();
      // Close window after printing
      setTimeout(() => {
        printWindow.close();
      }, 1000);
    }, 500);
  };
};

// Main download function with format selection
export const downloadResponse = (
  content: string,
  format: 'pdf' | 'html' | 'txt' = 'pdf',
  options: DownloadOptions = {}
) => {
  switch (format) {
    case 'pdf':
      downloadResponseAsPDF(content, options);
      break;
    case 'html':
      downloadResponseAsHTML(content, options);
      break;
    case 'txt':
      downloadResponseAsTXT(content, options);
      break;
    default:
      downloadResponseAsPDF(content, options);
  }
}; 